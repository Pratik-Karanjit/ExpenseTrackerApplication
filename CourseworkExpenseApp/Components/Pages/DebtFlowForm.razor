@page "/debtFlowForm"
@using CourseworkExpenseApp.Models
@using CourseworkExpenseApp.Services
@inject IDebtFlowService DebtFlowService
@inject NavigationManager navigationManager

<div class="container mt-5">
    <div class="card">
        <div class="card-header text-center">
            <h4>Debt Form</h4>
        </div>
        <div class="card-body">
            <EditForm Model="@newDebtFlow" OnValidSubmit="@AddDebtFlow">
                <DataAnnotationsValidator />

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="debtFlowSource" class="form-label">Debt Flow Source</label>
                        <InputText id="debtFlowSource" class="form-control" placeholder="Enter your Debt Flow Source" @bind-Value="newDebtFlow.DebtFormSource" />
                        <ValidationMessage For="@(() => newDebtFlow.DebtFormSource)" />
                    </div>
                    <div class="col-md-6">
                        <label for="amount" class="form-label">Amount</label>
                        <InputNumber id="amount" class="form-control" placeholder="Enter your Amount" @bind-Value="newDebtFlow.Amount" />
                        <ValidationMessage For="@(() => newDebtFlow.Amount)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="transactionDate" class="form-label">Transaction Date</label>
                        <InputDate id="transactionDate" class="form-control" @bind-Value="newDebtFlow.TransactionDate" />
                        <ValidationMessage For="@(() => newDebtFlow.TransactionDate)" />
                    </div>
                    <div class="col-md-6">
                        <label for="dueDate" class="form-label">Due Date</label>
                        <InputDate id="dueDate" class="form-control" @bind-Value="newDebtFlow.DueDate" />
                        <ValidationMessage For="@(() => newDebtFlow.DueDate)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="tag" class="form-label">Tag</label>
                        <InputSelect id="tag" class="form-select" @bind-Value="newDebtFlow.Tag">
                            <option value="">Select a Tag</option>
                            <option value="Loan">Loan</option>
                            <option value="Bills">Bills</option>
                            <option value="House">House</option>
                            <option value="Credit Card">Credit Card</option>
                            <option value="Medical">Medical</option>
                            <option value="Education">Education</option>
                            <option value="Car">Car</option>
                            <option value="Mortgage">Mortgage</option>
                            <option value="Business">Business</option>
                            <option value="Personal">Personal</option>
                            <option value="Tax">Tax</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => newDebtFlow.Tag)" />
                    </div>
                    <div class="col-md-6">
                        <label for="customTag" class="form-label">Custom Tag (Optional)</label>
                        <InputText id="customTag" class="form-control" placeholder="Custom Tag" @bind-Value="newDebtFlow.CustomTag" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="notes" class="form-label">Notes (Optional)</label>
                    <InputTextArea id="notes" class="form-control" rows="3" placeholder="Enter note" @bind-Value="newDebtFlow.Notes"></InputTextArea>
                </div>

                <div class="d-flex justify-content-end align-items-end">
                    <button type="submit" class="btn btn-primary fw-semibold px-7 py-3" style="background-color: #594AE2; border: none;">
                        Submit
                    </button>
                </div>
            </EditForm>

        </div>
    </div>
</div>

@code {
    private DebtFlow newDebtFlow = new DebtFlow();
    private string errorMessage;

    // New field for searching user
    private int searchUserId;

    private async Task AddDebtFlow()
    {
        try
        {
            var existingDebts = await DebtFlowService.LoadDebtFlowAsync();

            Console.WriteLine("after exissting users");
            // Generate a unique GUID as UserId
            newDebtFlow.DebtFormId = Guid.NewGuid().ToString();

            newDebtFlow.IsCleared = false;
            newDebtFlow.FlowType = "Debt";

            await DebtFlowService.SaveDebtFlowAsync(newDebtFlow);

            newDebtFlow = new DebtFlow();
            errorMessage = null;
            // navigationManager.NavigateTo("/debtForm");

            navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while adding the user: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

}