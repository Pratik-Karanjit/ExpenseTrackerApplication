@page "/cashFlowForm"
@using CourseworkExpenseApp.Models
@using CourseworkExpenseApp.Services
@inject ICashFlowService CashFlowService
@inject NavigationManager navigationManager
@inject IDebtFlowService DebtFlowService

<div class="container mt-5">
    <div class="card">
        <div class="card-header text-center">
            <h4>Cash Flow Forms</h4>
        </div>
        <div class="card-body">
            <!-- Display error message if exists -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <EditForm Model="@newCashFlow" OnValidSubmit="AddCashFlow">
                <DataAnnotationsValidator />

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="amount" class="form-label">Amount</label>
                        <InputNumber id="amount" class="form-control" placeholder="Enter your Amount" @bind-Value="newCashFlow.Amount" />
                        <ValidationMessage For="@(() => newCashFlow.Amount)" />
                    </div>
                    <div class="col-md-6">
                        <label for="flowType" class="form-label">Inflow/Outflow</label>
                        <InputSelect id="flowType" class="form-select" @bind-Value="newCashFlow.FlowType">
                            <option value="" disabled selected>Select Flow Type</option>
                            <option value="Inflow">Inflow</option>
                            <option value="Outflow">Outflow</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => newCashFlow.FlowType)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="transactionTitle" class="form-label">Transaction Title</label>
                        <InputText id="transactionTitle" class="form-control" placeholder="Enter your Transaction Title" @bind-Value="newCashFlow.TransactionTitle" />
                        <ValidationMessage For="@(() => newCashFlow.TransactionTitle)" />
                    </div>
                    <div class="col-md-6">
                        <label for="date" class="form-label">Date</label>
                        <InputDate @bind-Value="newCashFlow.Date" class="form-control" id="date" />
                        <ValidationMessage For="@(() => newCashFlow.Date)" />
                    </div>
                </div>

            
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="tag" class="form-label">Tag</label>
                        <InputSelect id="tag" class="form-select" @bind-Value="newCashFlow.Tag">
                            <option selected>Select a Tag</option>
                            <option value="Yearly">Yearly</option>
                            <option value="Monthly">Monthly</option>
                            <option value="Food">Food</option>
                            <option value="Drinks">Drinks</option>
                            <option value="Clothes">Clothes</option>
                            <option value="Gadgets">Gadgets</option>
                            <option value="Miscellaneous">Miscellaneous</option>
                            <option value="Fuel">Fuel</option>
                            <option value="Rent">Rent</option>
                            <option value="EMI">EMI</option>
                            <option value="Party">Party</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => newCashFlow.Tag)" />
                    </div>
                    <div class="col-md-6">
                        <label for="customTag" class="form-label">Custom Tag (Optional)</label>
                        <InputText id="customTag" class="form-control" placeholder="Custom Tag" @bind-Value="newCashFlow.CustomTag" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="notes" class="form-label">Notes (Optional)</label>
                    <InputTextArea id="notes" class="form-control" rows="3" placeholder="Enter note" @bind-Value="newCashFlow.Notes" />
                </div>

                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary fw-semibold px-7 py-3" style="background-color: #594AE2; border: none;">
                        Submit
                    </button>
                </div>
            </EditForm>

        </div>
    </div>
</div>

@code {
    private CashFlow newCashFlow = new CashFlow();
    private string errorMessage;
        private decimal totalInflows;
        private decimal totalOutflows;
        private decimal totalClearedDebts;
    private decimal currentBalance;

    private async Task AddCashFlow()
    {
        try
        {

            var cashFlows = await CashFlowService.LoadCashFlowAsync();
            var debts = await DebtFlowService.LoadDebtFlowAsync();

            totalInflows = cashFlows
                .Where(c => c.FlowType == "Inflow")
                .Sum(c => c.Amount);

            totalOutflows = cashFlows
                .Where(c => c.FlowType == "Outflow")
                .Sum(c => c.Amount);

            totalClearedDebts = debts
                .Where(d => d.IsCleared)
                .Sum(d => d.Amount);

            currentBalance = totalInflows - totalOutflows - totalClearedDebts;

            // Check if there is sufficient balance for outflows
            if (newCashFlow.FlowType == "Outflow" && newCashFlow.Amount > currentBalance)
            {
                errorMessage = $"Insufficient balance for Outflow! Current balance: {currentBalance:C}.";
                return;
            }

            // Generate a unique GUID as CashFlowId
            newCashFlow.CashFlowId = Guid.NewGuid().ToString();

            // Save the new cash flow record
            await CashFlowService.SaveCashFlowAsync(newCashFlow);

            // Reset the form and clear errors
            newCashFlow = new CashFlow();
            errorMessage = null;

            navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while adding the cash flow: {ex.Message}";
        }
    }
}

